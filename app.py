# Patrick ‚Äî Telegram bot for English practice (Render-ready version)

import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import openai

# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# OpenAI key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Greetings and options
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first = update.effective_user.first_name
    reply_keyboard = [["–ü–µ—Ä–µ–∫–ª–∞–¥", "–û–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏", "–ü–æ–¥–∏—Å–∫—É—Ç–∏–≤–∞—Ç–∏"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {user_first}! üëã\n\n–©–æ —Ä–æ–±–∏–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=markup)

# Main logic: reply with OpenAI
async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    # Compose context prompt for OpenAI
    messages = [
        {"role": "system", "content": "Patrick ‚Äî –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ö–æ—Å—Ç–µ—é –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏.\n\nüî∏ –°–ø—ñ–ª–∫—É–π—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ '—Ç–∏'. –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º, –ø—ñ–¥—Ç—Ä–∏–º—É–π, –∂–∞—Ä—Ç—É–π –¥–µ–ª—ñ–∫–∞—Ç–Ω–æ.\nüî∏ –Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç —Ä–æ–±–∏—Ç—å –ø–æ–º–∏–ª–∫—É: –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–Ω–∞–π—Ç–∏ —ó—ó —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ (üëÄ), –ø–æ–∫–∞–∂–∏ –¥–µ –ø–æ–º–∏–ª–∫–∞ (‚û°Ô∏è), –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (‚úÖ), –ø–æ—è—Å–Ω–µ–Ω–Ω—è (üìö).\nüî∏ –Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç —É–Ω–∏–∫–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤ ‚Äî –º º—è–∫–æ –ø—ñ–¥–∫–∞–∑—É–π, —è–∫ –≤—Å—Ç–∞–≤–∏—Ç–∏.\nüîπ –ö–æ–∂–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '–©–æ —Ä–æ–±–∏–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ?' —ñ —Ç—Ä—å–æ–º–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏.\nüî∏ –£ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –ü–µ—Ä–µ–∫–ª–∞–¥, –û–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏, –ü–æ–¥–∏—Å–∫—É—Ç–∏–≤–∞—Ç–∏ ‚Äî –¥–æ—Ç—Ä–∏–º—É–π—Å—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏, –ø–æ—è—Å–Ω–µ–Ω—å, –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å.\nüîÅ –£ –≤—Å—ñ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ª–µ–∫—Å–∏–∫–∞ –≥—Ä—É–ø–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ).\nüìå –ó–∞–≤–∂–¥–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–π –¥—ñ–∞–ª–æ–≥.\nüìö –ö–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ —Ä–æ–∑—É–º—ñ—î —Å–ª–æ–≤–æ ‚Äî –ø–æ—è—Å–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º.\n‚õî –ù–µ –¥–∞–≤–∞–π –ø–µ—Ä–µ–∫–ª–∞–¥ –æ–¥—Ä–∞–∑—É.\nüéØ –¶—ñ–ª—å ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –º–∏—Å–ª–µ–Ω–Ω—è —ñ —Å—Ç–∏–º—É–ª—é–≤–∞—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω—É —Ä–æ–∑–º–æ–≤—É.\n"},
        {"role": "user", "content": user_input},
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7
        )
        reply_text = response.choices[0].message["content"]
        await update.message.reply_text(reply_text)
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ üôè")

# Token and run
if __name__ == '__main__':
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))
    application.run_polling()
